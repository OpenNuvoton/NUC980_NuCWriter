[CHIP]
# Select MPU type
# mpu: NUC970, NUC980, or MA35D1 #
mpu = NUC980


[RUN]
# Select mode, you are to select strages
# mode: SDRAM,SPINOR,SPINAND,SD, NAND #
mode = SD

# "yes" if you want to burn all deivce # 
# all_device: yes, no #
all_device = no


# "yes" if you want to pack image according to the mode #
# when pack is "yes", only multipe images are packaged into one file #
# pack: yes, no #
pack = no
pack_path = ../pattern/pack.bin

[DDR]
# Select NUC980 series to initial SDRAM
# NUC980DF61YC.ini #
# NUC980DK61Y.ini  #
# NUC980DK61YC.ini #
# NUC980DR61Y.ini  #

ddr = NUC980DF61YC.ini


[SD]
# This mode set "run" to control SD and specify the type of the image. 
# These types can be recognized by bootloader or Linux. 
# The image type is set loader, data, environment or pack.

# program : write a new image to SD
# program_verify : write a new image to SD and verify image
# read : read data from SD to your's computer.
# run: program, program_verify, read, format  #
run = program

#------------------- program -------------------#
# type: data, env, loader, pack #
image_num = 3
image0_path= ..\pattern\U-Boot_IMG\U-Boot-SD\u-boot.bin
image0_type = loader
image0_exe_addr = 0xe00000
image0_start_offset = 0x000400

image1_type = data
image1_path= ../pattern/kernel/980uimage
image1_exe_addr = 0x0000
image1_start_offset = 0x200000

image2_type = env
image2_path= ../pattern/U-Boot_IMG/U-Boot-SD/sd_uimage_env.txt
image2_exe_addr = 0x00000
image2_start_offset = 0x80000


#------------------- read -------------------#
read_path =  ../pattern/record_sd.bin
read_start_blocks = 0
read_offset_blocks = 400

# using_user_defined always set "yes"
using_user_defined = yes

#------------------- format ------------------#
# using_format always set "yes" ,  SD/eMMC format FAT32
# using_dtb: yes, no #
using_format = no

# reserved_size : unit of MB, 1 MB is 1024 bytes  #
reserved_size = 1024

#Set partition number, it shuold be 1 ~ 4.
#program :
#if only one partition, partition1_size automatically assigned size, partition1_size =  SD/eMMC size - "reserved_size"
#if two partition, partition2_size automatically assigned size, partition2_size =  SD/eMMC size - "partition1_size" - "reserved_size"
#and so on
#
#pack:
#If you need 3 partition , you need to set partitions1_size, partition2_size and partition3_size
#
partition_num= 3

#Set partition 1 size, it is valid when partition_num more then or equal to 2, unit of MB, 1 MB is 1024 bytes.
partition1_size= 1024

#Set partition 2 size, it is valid when partition_num more then or eqult to 3, unit of MB, 1 MB is 1024 bytes.
partition2_size= 1024

#Set partition 3 size, it is valid when partition_num more then or equal to 4, unit of MB, 1 MB is 1024 bytes.
partition3_size= 0

